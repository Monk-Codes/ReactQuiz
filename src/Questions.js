export default [
 {
  id: "q1",
  text: "Which of the following definitions best describes React.js?",
  answers: [
   "A library to build user interfaces with help of declarative code.",
   "A library for managing state in web applications.",
   "A framework to build user interfaces with help of imperative code.",
   "A library used for building mobile applications only.",
  ],
 },
 {
  id: "q2",
  text: "What purpose do React hooks serve?",
  answers: ["Enabling the use of state and other React features in functional components.", "Creating responsive layouts in React applications.", "Handling errors within the application.", "Part of the Redux library for managing global state."],
 },
 {
  id: "q3",
  text: "Can you identify what JSX is?",
  answers: [
   "A JavaScript extension that adds HTML-like syntax to JavaScript.",
   "A JavaScript library for building dynamic user interfaces.",
   "A specific HTML version that was explicitly created for React.",
   "A tool for making HTTP requests in a React application.",
  ],
 },
 {
  id: "q4",
  text: "What is the most common way to create a component in React?",
  answers: ["By defining a JavaScript function that returns a renderable value.", "By defining a custom HTML tag in JavaScript.", "By creating a file with a .jsx extension.", 'By using the "new" keyword followed by the component name.'],
 },
 {
  id: "q5",
  text: 'What does the term "React state" imply?',
  answers: [
   "An object in a component that holds values and may cause the component to render on change.",
   "The lifecycle phase a React component is in.",
   "The overall status of a React application, including all props and components.",
   "A library for managing global state in React applications.",
  ],
 },
 {
  id: "q6",
  text: "How do you typically render list content in React apps?",
  answers: [
   "By using the map() method to iterate over an array of data and returning JSX.",
   "By using the for() loop to iterate over an array of data and returning JSX.",
   "By using the forEach() method to iterate over an array of data and returning JSX.",
   "By using the loop() method to iterate over an array of data and returning JSX.",
  ],
 },
 {
  id: "q7",
  text: "Which approach can NOT be used to render content conditionally?",
  answers: ["Using a the #if template syntax.", "Using a ternary operator.", "Using the && operator.", "Using an if-else statement."],
 },
 {
  id: "q8",
  text: "What is the virtual DOM (VDOM) in React?",
  answers: [
   "A lightweight representation of the actual DOM in memory.",
   "A physical representation of the DOM generated by React.",
   "A technique used to optimize rendering performance in React applications.",
   "A way to directly manipulate the DOM in React components.",
  ],
 },
 {
  id: "q9",
  text: "What are props in React?",
  answers: ["Short for properties, they are inputs to React components.", "Methods to modify component state.", "Reserved keywords in React for defining component structure.", "Global variables accessible to all React components."],
 },
 {
  id: "q10",
  text: "How do you pass data from a parent to a child component in React?",
  answers: ["By using props.", "By using state.", "By using context.", "By directly modifying the child component's variables."],
 },
 {
  id: "q11",
  text: "What is the purpose of React.Fragment?",
  answers: ["To group multiple children elements without adding an extra node to the DOM.", "To define fragments of JSX code.", "To create reusable components in React.", "To handle form submissions in React applications."],
 },
 {
  id: "q12",
  text: "What is a controlled component in React?",
  answers: [
   "A component that takes its current value through props and notifies changes through callbacks like onChange.",
   "A component that manages its own state internally.",
   "A component that is not affected by changes in its parent's state.",
   "A component that is responsible for rendering other components.",
  ],
 },
 {
  id: "q13",
  text: "What are the benefits of using React?",
  answers: [
   "Component-based architecture, virtual DOM for performance optimization, and reusable components.",
   "Simple syntax, easy integration with other libraries, and built-in state management.",
   "Support for both front-end and back-end development, strong typing, and dependency injection.",
   "Built-in routing, server-side rendering, and automatic code splitting.",
  ],
 },
 {
  id: "q14",
  text: "What is JSX in React?",
  answers: [
   "A syntax extension for JavaScript that allows writing HTML elements in JavaScript code.",
   "A JavaScript library for building user interfaces.",
   "A templating engine used in React applications.",
   "A shorthand for JavaScript XML used to create React elements.",
  ],
 },
 {
  id: "q15",
  text: "How does React handle forms?",
  answers: ["By using controlled components to manage form state.", "By relying on the browser's native form handling.", "By using third-party libraries like Redux Form.", "By using uncontrolled components to manage form state."],
 },
 {
  id: "q16",
  text: "What is the purpose of keys in React lists?",
  answers: ["To give React a hint which items have changed, are added, or are removed.", "To uniquely identify elements in an array.", "To control the order of elements in a list.", "To optimize rendering performance by reducing re-renders."],
 },
 {
  id: "q17",
  text: "What are React lifecycle methods?",
  answers: [
   "Special methods in React components that execute at specific points in a component's lifecycle.",
   "Methods to manipulate the browser's DOM directly.",
   "Methods used for handling asynchronous operations in React applications.",
   "Methods to manage component state in class components.",
  ],
 },
 {
  id: "q18",
  text: "How can you update the state of a component in React?",
  answers: ["By calling the setState() method.", "By directly modifying the state object.", "By using Redux actions.", "By using props."],
 },
 {
  id: "q19",
  text: "What is the significance of defaultProps in React?",
  answers: [
   "To provide default values for props that are not specified by the parent component.",
   "To define default styling for React components.",
   "To specify default state values for class components.",
   "To ensure that certain props are always passed to a component.",
  ],
 },
 {
  id: "q20",
  text: "What is React Router?",
  answers: ["A popular routing library for React applications.", "A built-in feature of React for handling navigation.", "A tool for optimizing React components.", "A state management library for React applications."],
 },
 {
  id: "q21",
  text: "What is the purpose of PureComponent in React?",
  answers: [
   "To improve performance by automatically implementing shouldComponentUpdate() with a shallow prop and state comparison.",
   "To create components with pure functions in React.",
   "To handle pure CSS animations in React applications.",
   "To prevent unnecessary re-renders of React components.",
  ],
 },
 {
  id: "q22",
  text: "What is the significance of the React Developer Tools extension?",
  answers: ["To inspect and debug React component hierarchies.", "To optimize performance of React applications.", "To automatically generate React components based on design specifications.", "To manage global state in React applications."],
 },
 {
  id: "q23",
  text: "What is the purpose of the key prop in React?",
  answers: ["To uniquely identify elements in an array.", "To define default values for props in React components.", "To provide a unique identifier for React components.", "To specify the order of elements in a list."],
 },
 {
  id: "q24",
  text: "What are React Hooks?",
  answers: [
   "Functions that let you use state and other React features without writing a class.",
   "Functions that define custom lifecycle methods in React components.",
   "Functions that handle asynchronous operations in React applications.",
   "Functions used for creating reusable components in React.",
  ],
 },
 {
  id: "q25",
  text: "What is the purpose of the useEffect() hook in React?",
  answers: ["To perform side effects in function components.", "To update component state in response to prop changes.", "To handle form submissions in React applications.", "To define event listeners in React components."],
 },
 {
  id: "q26",
  text: "What is the significance of PropTypes in React?",
  answers: [
   "To validate props passed to React components during development.",
   "To define the type of state variables in React components.",
   "To optimize rendering performance in React applications.",
   "To automatically generate documentation for React components.",
  ],
 },
 {
  id: "q27",
  text: "What is the purpose of the context API in React?",
  answers: [
   "To share data between components without having to pass props through every level of the tree.",
   "To manage component state in React applications.",
   "To optimize rendering performance by reducing re-renders.",
   "To define global variables accessible to all React components.",
  ],
 },
 {
  id: "q28",
  text: "What is the significance of the ReactDOM.render() method in React?",
  answers: ["To render React elements into the DOM.", "To define the root element of a React application.", "To update the state of a React component.", "To handle form submissions in React applications."],
 },
 {
  id: "q29",
  text: "What is the purpose of the dangerouslySetInnerHTML attribute in React?",
  answers: [
   "To render raw HTML from strings, which may pose a security risk if not used carefully.",
   "To define inline styles in React components.",
   "To handle user input events in React components.",
   "To optimize rendering performance by bypassing the virtual DOM.",
  ],
 },
 {
  id: "q30",
  text: "How do you handle events in React?",
  answers: ["By using event handlers like onClick, onChange, etc., similar to handling events in HTML.", "By directly modifying the DOM.", "By using jQuery event handlers.", "By using inline event attributes in JSX."],
 },
 {
  id: "q31",
  text: "What is the purpose of the useCallback hook in React?",
  answers: [
   "To memoize functions in functional components, preventing unnecessary re-renders.",
   "To perform asynchronous operations in React components.",
   "To manage global state in React applications.",
   "To handle form submissions in React applications.",
  ],
 },
 {
  id: "q32",
  text: "How do you handle errors in React?",
  answers: ["By using error boundaries to catch and handle errors within a component tree.", "By using try...catch blocks within React components.", "By logging errors to the console.", "By using third-party error handling libraries."],
 },
 {
  id: "q33",
  text: "What is the significance of using keys when rendering a list of elements in React?",
  answers: ["To help React identify which items have changed, are added, or are removed.", "To control the order of elements in the list.", "To uniquely identify elements in an array.", "To optimize rendering performance by reducing re-renders."],
 },
 {
  id: "q34",
  text: "What is the purpose of the useMemo hook in React?",
  answers: [
   "To memoize expensive computations in functional components, optimizing performance.",
   "To manage side effects in React components.",
   "To define memoized functions in React components.",
   "To handle user input events in React components.",
  ],
 },
 {
  id: "q35",
  text: "What are fragments in React?",
  answers: [
   "A way to group multiple children elements without adding an extra node to the DOM.",
   "Special elements used for conditional rendering in React components.",
   "Components that don't have a parent.",
   "Elements that are not rendered to the DOM.",
  ],
 },
 {
  id: "q36",
  text: "What is the purpose of the useReducer hook in React?",
  answers: ["To manage complex state logic in React components.", "To handle routing in React applications.", "To define reducers for use in Redux applications.", "To handle form submissions in React applications."],
 },
 {
  id: "q37",
  text: "What is the significance of the React.memo() function?",
  answers: ["To memoize functional components, preventing unnecessary re-renders.", "To define memoized functions in React components.", "To handle asynchronous operations in React components.", "To manage component state in React applications."],
 },
 {
  id: "q38",
  text: "What are portals in React?",
  answers: [
   "A way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.",
   "Special components used for routing in React applications.",
   "Components that are mounted directly to the document body.",
   "A technique for lazy loading components in React applications.",
  ],
 },
 {
  id: "q39",
  text: "What is the purpose of the useRef hook in React?",
  answers: ["To create mutable references in functional components.", "To manage component state in React applications.", "To handle asynchronous operations in React components.", "To optimize rendering performance by skipping unnecessary updates."],
 },
 {
  id: "q40",
  text: "How do you conditionally apply styles in React?",
  answers: [
   "By using inline conditional rendering or ternary expressions within JSX.",
   "By directly manipulating the DOM.",
   "By defining CSS classes and applying them conditionally with JavaScript.",
   "By using the style prop and passing an object with conditional styles.",
  ],
 },
 {
  id: "q41",
  text: "What is the purpose of the withRouter higher-order component in React Router?",
  answers: [
   "To provide access to the history object's properties and the closest <Route>'s match.",
   "To optimize rendering performance in React applications.",
   "To define custom route transitions in React applications.",
   "To handle authentication in React applications.",
  ],
 },
 {
  id: "q42",
  text: "How do you dynamically import components in React?",
  answers: ["By using React.lazy() and Suspense for lazy loading.", "By using third-party libraries like Loadable Components.", "By using the webpack dynamic import syntax.", "By directly importing components at runtime."],
 },
 {
  id: "q43",
  text: "What is the purpose of the useHistory hook in React Router?",
  answers: [
   "To access the history object's properties and navigate programmatically.",
   "To define custom route transitions in React applications.",
   "To manage global state in React applications.",
   "To handle form submissions in React applications.",
  ],
 },
 {
  id: "q44",
  text: "What is the significance of the keyExtractor prop in React Native's FlatList component?",
  answers: [
   "To provide keys for items in the list, improving performance and enabling efficient updates.",
   "To define the layout of items in the list.",
   "To control the behavior of the list when scrolling.",
   "To define default values for props in React components.",
  ],
 },
 {
  id: "q45",
  text: "What is the purpose of the ScrollView component in React Native?",
  answers: [
   "To provide a scrolling container for content that is larger than the screen.",
   "To define a fixed-size container for displaying content.",
   "To optimize rendering performance by only rendering items that are currently visible.",
   "To handle touch events in React Native applications.",
  ],
 },
 {
  id: "q46",
  text: "How do you handle navigation in React Native?",
  answers: ["By using the navigation prop provided by React Navigation or similar libraries.", "By directly manipulating the DOM.", "By using third-party libraries like React Router.", "By defining custom navigation components."],
 },
 {
  id: "q47",
  text: "What is the significance of the useState hook in React Native?",
  answers: ["To add state management to functional components in React Native.", "To define styles for React Native components.", "To manage component state in React Native applications.", "To handle navigation in React Native applications."],
 },
 {
  id: "q48",
  text: "What is the purpose of the useEffect hook in React Native?",
  answers: [
   "To perform side effects in functional components, similar to componentDidMount and componentDidUpdate in class components.",
   "To define lifecycle methods in React Native components.",
   "To handle asynchronous operations in React Native applications.",
   "To manage global state in React Native applications.",
  ],
 },
 {
  id: "q49",
  text: "How do you handle touch events in React Native?",
  answers: [
   "By using gesture responder system provided by React Native.",
   "By using onClick handlers similar to web development.",
   "By using third-party libraries like Hammer.js.",
   "By defining custom touch event listeners in React Native components.",
  ],
 },
 {
  id: "q50",
  text: "What is the purpose of the Animated API in React Native?",
  answers: [
   "To create complex animations and interactive user interfaces in React Native applications.",
   "To handle asynchronous operations in React Native applications.",
   "To optimize rendering performance by using hardware acceleration.",
   "To define styles for React Native components.",
  ],
 },
];
